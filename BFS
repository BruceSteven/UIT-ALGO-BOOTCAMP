// BFS algorithm in C++

#include <iostream>
#include <list>

using namespace std;

        class Graph {
          private: 
              int sodinh;
              list<int>* queues;
              bool* visited;
          public:
              Graph(int sodinh);
              void addEdge(int u, int v);
              void BFS(int dinh);
        };

// Khoi tao Graph

t
            Graph::Graph(int sodinh) {
              sodinh = sodinh;
              queues = new list<int>[sodinh];
              visited = new bool[sodinh];
              for (int i = 0; i < sodinh; i++)
                visited[i] = false; 
            }

// Them canh

            void Graph::addEdge(int u, int v) {
              queues[u].push_back(v);
              queues[v].push_back(u);
            }



// BFS algorithm
        
        void Graph::BFS(int dinh) {
          list<int> queue;      
          visited[dinh] = true;
          queue.push_back(dinh);
        
          list<int>::iterator i;
        
          while (!queue.empty()) {
            int dinhhientai = queue.front();
            cout << "Visited " << dinhhientai << " ";
            queue.pop_front();
            for (i = queues[dinhhientai].begin(); i != queues[dinhhientai].end(); ++i) {
              int adjVertex = *i;
              if (!visited[adjVertex]) {
                visited[adjVertex] = true;
                queue.push_back(adjVertex);
              }
            }
          }
        }

int main() {
  Graph g(4);
  g.addEdge(0, 1);
  g.addEdge(0, 2);
  g.addEdge(1, 2);
  g.addEdge(2, 0);
  g.addEdge(2, 3);
  g.addEdge(3, 3);

  g.BFS(2);

  return 0;
}
